@using Blazored.LocalStorage
@using IMS.WebApp.Components.Layout.Shared
@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<MudThemeProvider />
<div class="public-page">
    <!-- Fixed Header -->
    <header>
        <Header />
    </header>

    <!-- Breadcrumbs -->
    <nav class="breadcrumb-nav">
        <MudBreadcrumbs Items="BreadcrumbItems" Separator=">" />
    </nav>

    <!-- Body Content -->
    <main class="main-content">
        @Body
    </main>

    <!-- Fixed Footer -->
    <footer>
        <Footer />
    </footer>
</div>

@code {
    private List<BreadcrumbItem> BreadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        await UpdateBreadcrumbsAsync();
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await UpdateBreadcrumbsAsync();
        StateHasChanged();
    }

    private async Task UpdateBreadcrumbsAsync()
    {
        const string storageKey = "lastVisitedUrls";
        var currentUrl = NavigationManager.Uri;

        if (currentUrl.Contains("/success") || currentUrl.Contains("/cancel")){
            currentUrl = NavigationManager.BaseUri;
        }
        if (currentUrl.Contains("/order-summary") || currentUrl.Contains("/login") || currentUrl.Contains("/signup"))
        {
            return;
        }

        var storedBreadcrumbs = await LocalStorage.GetItemAsync<List<BreadcrumbItem>>(storageKey) ?? new List<BreadcrumbItem>();

        if (storedBreadcrumbs.All(b => b.Href != currentUrl))
        {
            var pageTitle = await JSRuntime.InvokeAsync<string>("eval", "document.title");

            storedBreadcrumbs.Add(new BreadcrumbItem(pageTitle, href: currentUrl));
        }
        else
        {
            int index = storedBreadcrumbs.FindIndex(item => item.Href == currentUrl);
            if (index != -1)
            {
                storedBreadcrumbs.RemoveRange(index + 1, storedBreadcrumbs.Count - (index + 1));
            }

        }
        BreadcrumbItems = new List<BreadcrumbItem>(storedBreadcrumbs);
        await LocalStorage.SetItemAsync(storageKey, storedBreadcrumbs);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
