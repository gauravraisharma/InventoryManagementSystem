@using IMS.WebApp.Client.Authentication
@inject ITokenService TokenService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject AuthStateService AuthStateService

<MudPaper Width="250px" Height="100vh" Style="background-color:antiquewhite">
    <MudNavMenu Color="Color.Primary">
        <MudNavGroup Title=@Username
        Icon="@Icons.Material.Filled.AccountCircle"
        IconColor="Color.Primary"
        Expanded="@_isExpanded"
        OnClick="@(() => _isExpanded = !_isExpanded)">
            <MudNavLink Href="/userProfile"
            Icon="@Icons.Material.Filled.Person"
            IconColor="Color.Success">
                My Profile
            </MudNavLink>
            <MudNavLink Href="/security"
            Icon="@Icons.Material.Filled.Settings"
            IconColor="Color.Info">
                Setting
            </MudNavLink>
        </MudNavGroup>

        <MudDivider Class="my-2" />

        <MudNavLink Href="/admin/dashboard"
        Icon="@Icons.Material.Filled.Dashboard"
        IconColor="Color.Primary">
            Dashboard
        </MudNavLink>

        <MudNavLink Href="/product"
        Icon="@Icons.Material.Filled.Inventory"
        IconColor="Color.Primary">
            Products
        </MudNavLink>

        <MudNavLink Href="/order"
        Icon="@Icons.Material.Filled.ShoppingCart"
        IconColor="Color.Primary">
            Orders
        </MudNavLink>

        <MudNavLink Href="/customer"
        Icon="@Icons.Material.Filled.People"
        IconColor="Color.Primary">
            Customers
        </MudNavLink>

        <MudDivider Class="my-2" />

        <!-- Logout Button -->
        <MudButton Variant="Variant.Text"
        Color="Color.Default"
        Class="mx-2"
        OnClick="HandleLogout">
            LogOut
        </MudButton>

    </MudNavMenu>
</MudPaper>

@code {
    private bool _isExpanded = true;
    private bool IsAuthenticated { get; set; }
    private string UserRole { get; set; } = string.Empty;
    private string Username { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateService.GetAuthenticationStateAsync();
        Username = await TokenService.GetUserNameFromTokenAsync();
        IsAuthenticated = authState.User.Identity.IsAuthenticated;
        UserRole = AuthStateService.UserRole;
        
    }

    private async Task HandleLogout()
    {
        await TokenService.RemoveTokenAsync();
        NavigationManager.NavigateTo("/",true);
    }
}