@inject AuthStateService AuthStateService
@inject ITokenService TokenService
@inject NavigationManager NavigationManager
@using IMS.WebApp.Client.Authentication

<div id="nav-belt" class="d-flex align-items-center justify-content-between w-100">
    <!-- Left Section -->
    <div class="nav-left d-flex align-items-center">
        <MudText Typo="Typo.h6" Class="ml-2" Style="color: white;">TrackingStuff.in</MudText>
        <MudText Typo="Typo.body1" Style="color: white;" Class="ml-2">Delivering to Dehradun 248001</MudText>
    </div>

    <!-- Center Section -->
    <div class="nav-fill flex-grow-1 mx-4">
        <MudTextField T="string" Placeholder="Search" Class="w-100" Style="color: white;" />
    </div>

    <!-- Right Section -->
    <div class="nav-right d-flex align-items-center">
        @if (IsAuthenticated)
        {
            <!-- Dropdown for Signed-In User -->
            <MudMenu Class="custom-menu" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight">
                <MudButton Variant="Variant.Filled" Color="Color.Primary">
                    <MudIcon Icon="Icons.Material.Filled.AccountCircle" Class="mr-1" />
                    @Username
                </MudButton>

                <!-- Sign Out Option -->
                <MudMenuItem OnClick="SignOut" Class="mud-menu-item">Sign Out</MudMenuItem>
            </MudMenu>
        }
        else
        {
            <!-- Sign In Link -->
            <NavLink href="/login" class="ml-4 text-decoration-none" Style="color: aliceblue;">
                <MudText Typo="Typo.body1">Hello, sign in</MudText>
            </NavLink>
        }

        <!-- Cart Link -->
        <div style="padding-right: 10px">
            <NavLink href="/view-cart" class="ml-4 text-decoration-none" Style="color: aliceblue;">
                <MudText Typo="Typo.body1">Cart</MudText>
            </NavLink>
        </div>
    </div>
</div>

<style>
    #nav-belt {
    background-color: darkslateblue;
    height: 60px;
    font-size: 14px;
    position: relative;
    }

    .nav-right {
    justify-content: flex-end;
    }
</style>

@code {
    private string Username { get; set; }
    private bool IsAuthenticated { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateService.GetAuthenticationStateAsync();
        IsAuthenticated = authState.User.Identity.IsAuthenticated;
        if (IsAuthenticated)
        {
            Username = await TokenService.GetUserNameFromTokenAsync();
        }
    }


    private async Task SignOut()
    {
        await TokenService.RemoveTokenAsync();
        Username = null;  
        NavigationManager.NavigateTo("/");
        AuthStateService.NotifyAuthenticationStateChanged();
    }
}
