@inject AuthStateService AuthStateService
@inject ITokenService TokenService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using IMS.Shared.Common
@using IMS.WebApp.Client.Authentication

<div id="nav-belt" class="d-flex align-center justify-content-between w-100">
    <!-- Left Section -->
    <div class="nav-left d-flex align-center gap-5">
        <img src="/images/logo-white.png" alt="App Logo" class="header-logo" @onclick="NavigateToProductList" />
       @*  <MudText Typo="Typo.body1" Style="color: white;" Class="d-flex align-center justify-center gap-1"><MudIcon Icon="@Icons.Material.Outlined.Map" Title="Icon" /> Delivering to Dehradun 248001</MudText> *@
        <MudText Typo="Typo.body1" Style="color: white;" Class="d-flex align-center justify-center gap-1 location" @onclick="OnLocationClick">
            <MudIcon Icon="@Icons.Material.Outlined.Map" Title="Icon" />
            @if (IsLoading)
            {
                <span>Fetching location...</span>
            }
            else if (!string.IsNullOrEmpty(UserLocation))
            {
                <span>Delivering to @UserLocation</span>
            }
            else
            {
                <span>Unable to fetch location</span>
            }
        </MudText>
    </div>

    <!-- Center Section -->


    <!-- Right Section -->
    <div class="nav-right d-flex align-center gap-2 ml-auto">
        <div class="search-bar">
            <MudTextField Variant="Variant.Outlined" T="string" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"/>
        </div>
        <div class="profile-item d-flex align-center gap-2">
        @if (IsAuthenticated)
        {
            <!-- Dropdown for Signed-In User -->
            <MudMenu Class="ml-4">
                <ActivatorContent>
                    <MudAvatar>
                        <MudImage Src="" />
                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem>@Username</MudMenuItem>
                    <MudMenuItem OnClick="RedirectToMyOrder">My Order</MudMenuItem>
                    <MudMenuItem OnClick="RedirectToMyProfile">My Profile</MudMenuItem>
                    <MudMenuItem OnClick="RedirectToMyAddress">My Address</MudMenuItem>
                    <MudMenuItem OnClick="SignOut">Sign Out</MudMenuItem>
                </ChildContent>
            </MudMenu>
            @* <MudMenu Class="custom-menu" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight">
                <MudButton Variant="Variant.Filled" Color="Color.Primary">
                    <MudIcon Icon="Icons.Material.Filled.AccountCircle" Class="mr-1" />
                    @Username
                </MudButton>

                <!-- Sign Out Option -->
                <MudMenuItem OnClick="SignOut" Class="mud-menu-item">Sign Out</MudMenuItem>
            </MudMenu> *@
        }
        else
        {
            <!-- Sign In Link -->
            <NavLink href="/login" class="ml-4 text-decoration-none" Style="color: aliceblue;">
                <MudText Typo="Typo.body1">Hello, sign in</MudText>
            </NavLink>
        }

        <!-- Cart Link -->
        <NavLink href="/view-cart" class="ml-4 text-decoration-none" Style="color: aliceblue;">

            <MudText Typo="Typo.body1" Class="d-flex align-center justify-center gap-1"><MudIcon Icon="@Icons.Material.Outlined.ShoppingCart" Title="Icon" /> Cart</MudText>
        </NavLink>
        </div>
    </div>
</div>

<style>
    #nav-belt {
    background-color: darkslateblue;
    min-height: 60px;
    font-size: 14px;
    position: relative;
    padding: 12px 20px;
    }

    .nav-right {
    justify-content: flex-end;
    }

    .search-bar .mud-input-control {
    width: 430px;
    }

    .search-bar .mud-input > input.mud-input-root-outlined {
    padding: 10px 14px;
    }

    .search-bar .mud-input {
    background: #fff;
    color: #666666;
    border-radius: 6px;
    }
    .search-bar .mud-input.mud-input-outlined:not(.mud-disabled):not(:focus-within):hover .mud-input-outlined-border {
    border-color: rgb(255 255 255 / 54%);
    }

    .search-bar .mud-input.mud-input-outlined:focus-within .mud-input-outlined-border {
    border-color: rgb(255 255 255 / 54%);
    }
    .header-logo {
        width: 200px;
    }

    @@media (max-width: 1024.98px) {
        .search-bar .mud-input-control {
            width: 100%;
        }
    }

    @@media (max-width: 768.98px) {
        .header-logo {
            width: 160px;
        }
        #nav-belt {
            flex-direction: column;
        }

        .nav-right {
            margin-right: auto;
            margin-top: 10px;
        }
    }

    @@media (max-width: 575.98px) {
        .location span {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            width: 200px;
        }
        .nav-left {
            display: block !important;
            text-align: center;
        }

        .nav-right {
            display: block !important;
            text-align: center;
            width: 100%;
        }
        .profile-item {
            margin-top: 10px;
            justify-content: center;
        }
    }
</style>

@code {
    private string Username { get; set; }
    private bool IsAuthenticated { get; set; }
    private string UserLocation { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = true;
    private bool _locationFetched = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateService.GetAuthenticationStateAsync();
        IsAuthenticated = authState.User.Identity.IsAuthenticated;
        if (IsAuthenticated)
        {
            Username = await TokenService.GetUserNameFromTokenAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_locationFetched)
        {
            _locationFetched = true;
            await FetchUserLocationAsync();
            StateHasChanged();  
        }
    }

    private async Task FetchUserLocationAsync()
    {
        try
        {
            IsLoading = true;  
            var location = await JSRuntime.InvokeAsync<GeolocationPosition>("navigatorInterop.getCurrentPosition");
            if (location?.Coords != null)
            {
                double latitude = location.Coords.Latitude;
                double longitude = location.Coords.Longitude;
                var apiKey = "6d57b9d259af472a94074ec6ee6df3c7";
                var geocodeUrl = $"https://api.opencagedata.com/geocode/v1/json?q={latitude}+{longitude}&key={apiKey}";

                var response = await Http.GetAsync(geocodeUrl);
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    var geocodeData = System.Text.Json.JsonSerializer.Deserialize<OpenCageResponse>(json, new System.Text.Json.JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });

                    var firstResult = geocodeData?.Results?.FirstOrDefault();
                    if (firstResult != null && firstResult.Components != null)
                    {
                        var city = firstResult.Components.City ?? firstResult.Components.Town ??
                                   firstResult.Components.state_district ?? firstResult.Components.Municipality ?? "Unknown City";

                        UserLocation = $"{city}, {firstResult.Components.State}, {firstResult.Components.Postcode}";
                    }
                    else
                    {
                        UserLocation = "Location not found";
                    }
                }
                else
                {
                    UserLocation = "Unable to fetch location data";
                }
            }
            else
            {
                UserLocation = "Unable to fetch location";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching location: {ex.Message}");
            UserLocation = "Unable to fetch location";
        }
        finally
        {
            IsLoading = false;
        }
    }



   

    private void OnLocationClick()
    {
        if (!IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void NavigateToProductList()
    {
        if (!NavigationManager.Uri.EndsWith("/product", StringComparison.OrdinalIgnoreCase))
        {
            NavigationManager.NavigateTo("/");
        }
    }
    private async Task SignOut()
    {
        await TokenService.RemoveTokenAsync();
        await TokenService.RemoveBreadcrumbAsync();
        Username = null;  
        NavigationManager.NavigateTo("/",true);
        AuthStateService.NotifyAuthenticationStateChanged();
    }

    private async Task RedirectToMyOrder()
    {
        NavigationManager.NavigateTo("/myorder", true);
    }

    private async Task RedirectToMyProfile()
    {
        NavigationManager.NavigateTo("/userProfile", true);
    }
    private async Task RedirectToMyAddress()
    {
        NavigationManager.NavigateTo("/addresses");
    }
}
