@inject AuthStateService AuthStateService
@inject ITokenService TokenService
@inject NavigationManager NavigationManager
@using IMS.WebApp.Client.Authentication

<div id="nav-belt" class="d-flex align-center justify-content-between w-100">
    <!-- Left Section -->
    <div class="nav-left d-flex align-center gap-5">
        <img src="/images/logo-white.png" alt="App Logo" style="width: 200px;" />
        @* <MudText Typo="Typo.h6" Style="color: white;">TrackingStuff.in</MudText> *@
        <MudText Typo="Typo.body1" Style="color: white;" Class="d-flex align-center justify-center gap-1"><MudIcon Icon="@Icons.Material.Outlined.Map" Title="Icon" /> Delivering to Dehradun 248001</MudText>
    </div>

    <!-- Center Section -->
    

    <!-- Right Section -->
    <div class="nav-right d-flex align-center gap-2 ml-auto">
        <div class="search-bar">
            <MudTextField Variant="Variant.Outlined" T="string" Placeholder="Search" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"/>
        </div>
        @if (IsAuthenticated)
        {
            <!-- Dropdown for Signed-In User -->
            <MudMenu Class="ml-4">
                <ActivatorContent>
                    <MudAvatar>
                        <MudImage Src="" />
                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem>@Username</MudMenuItem>
                    <MudMenuItem OnClick="RedirectToMyOrder">My Order</MudMenuItem>
                    <MudMenuItem OnClick="RedirectToMyProfile">My Profile</MudMenuItem>
                    <MudMenuItem OnClick="SignOut">Sign Out</MudMenuItem>
                </ChildContent>
            </MudMenu>
            @* <MudMenu Class="custom-menu" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight">
                <MudButton Variant="Variant.Filled" Color="Color.Primary">
                    <MudIcon Icon="Icons.Material.Filled.AccountCircle" Class="mr-1" />
                    @Username
                </MudButton>

                <!-- Sign Out Option -->
                <MudMenuItem OnClick="SignOut" Class="mud-menu-item">Sign Out</MudMenuItem>
            </MudMenu> *@
        }
        else
        {
            <!-- Sign In Link -->
            <NavLink href="/login" class="ml-4 text-decoration-none" Style="color: aliceblue;">
                <MudText Typo="Typo.body1">Hello, sign in</MudText>
            </NavLink>
        }

        <!-- Cart Link -->
            <NavLink href="/view-cart" class="ml-4 text-decoration-none" Style="color: aliceblue;">

            <MudText Typo="Typo.body1" Class="d-flex align-center justify-center gap-1"><MudIcon Icon="@Icons.Material.Outlined.ShoppingCart" Title="Icon" /> Cart</MudText>
            </NavLink>
    </div>
</div>

<style>
    #nav-belt {
    background-color: darkslateblue;
    height: 60px;
    font-size: 14px;
    position: relative;
    padding: 12px 20px;
    }

    .nav-right {
    justify-content: flex-end;
    }

    .search-bar .mud-input-control {
        width: 430px;
    }

    .search-bar .mud-input > input.mud-input-root-outlined {
        padding: 10px 14px;
    }

    .search-bar .mud-input {
        background: #fff;
        color: #666666;
        border-radius: 6px;
    }
    .search-bar .mud-input.mud-input-outlined:not(.mud-disabled):not(:focus-within):hover .mud-input-outlined-border {
        border-color: rgb(255 255 255 / 54%);
    }

    .search-bar .mud-input.mud-input-outlined:focus-within .mud-input-outlined-border {
        border-color: rgb(255 255 255 / 54%);
    }
</style>

@code {
    private string Username { get; set; }
    private bool IsAuthenticated { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateService.GetAuthenticationStateAsync();
        IsAuthenticated = authState.User.Identity.IsAuthenticated;
        if (IsAuthenticated)
        {
            Username = await TokenService.GetUserNameFromTokenAsync();
        }
    }


    private async Task SignOut()
    {
        await TokenService.RemoveTokenAsync();
        Username = null;  
        NavigationManager.NavigateTo("/",true);
        AuthStateService.NotifyAuthenticationStateChanged();
    }

    private async Task RedirectToMyOrder()
    {
        NavigationManager.NavigateTo("/myorder", true);
    }

    private async Task RedirectToMyProfile()
    {
        NavigationManager.NavigateTo("/userProfile", true);
    }
}
