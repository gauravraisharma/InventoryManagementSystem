@page "/validate"
<PageTitle>Validate</PageTitle>
@using IMS.Shared.Interface.Code
@using IMS.WebApp.Client.Authentication
@inject NavigationManager NavigationManager
@inject AuthStateService AuthStateService
@inject ITwoFactorService TwoFactorService
@inject ITokenService TokenService
@inject Blazored.SessionStorage.ISessionStorageService _sessionStorageService
@inject NavigationManager NavigationManager


<MudContainer MaxWidth="MaxWidth.Small" Class="mt-6">
	<MudPaper Class="pa-10 login-card">
		@if (!IsCodeSent)
		{
			<MudText Typo="Typo.h4" Class="mb-4 text-center main-title mb-5">Email Verification</MudText>

			<MudForm>
				<div class="mb-5">
					<label class="mb-2">Email</label>
					<MudTextField Variant="Variant.Outlined" @bind-Value="Email" Disabled="true" />
				</div>
				<MudButton OnClick="SendCode" Class="btn-theme">Send Code</MudButton>
			</MudForm>
		}
		else
		{
			<MudText Typo="Typo.h4" Class="mb-4 text-center main-title mb-5">Enter Verification Code</MudText>

			<MudForm>
				<MudTextField Variant="Variant.Outlined" @bind-Value="Code" MaxLength="6" Class="mb-5" />
				<MudButton Class="btn-theme" OnClick="ValidateCode">Verify Code</MudButton>
			</MudForm>
		}

		@if (!string.IsNullOrEmpty(StatusMessage))
		{
			<MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-3">@StatusMessage</MudText>
		}
		<MudText Class="mt-4 text-center"><MudLink @onclick="LogoutAndRedirect" Color="Color.Primary" Class="text-theme">Back to Login</MudLink></MudText>
	</MudPaper>
</MudContainer>
<style>
	.login-card {
		box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
		border-radius: 10px;
		border: 1px solid #eaeaea;
	}

	.btn-theme {
		width: 100%;
		background: darkslateblue;
		color: #fff;
		text-transform: capitalize;
		padding: 8px 16px;
		font-size: 18px;
	}

		.btn-theme:hover {
			background: #FFD700;
			color: #000;
		}

	.text-center {
		text-align: center;
	}

	.text-theme {
		color: darkslateblue;
		font-weight: 500;
	}

	.main-title {
		font-weight: 600;
		color: #000;
	}

	.mud-input > input.mud-input-root-outlined {
		padding: 14px 14px;
	}
</style>

@code {
	private string Email { get; set; } = string.Empty; 
	private string Code { get; set; } = string.Empty;
	private bool IsCodeSent { get; set; } = false;
	private string StatusMessage { get; set; } = string.Empty;
	private bool IsAuthenticated { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var token = await TokenService.GetPreTokenFromSessionAsync();
		if (!string.IsNullOrEmpty(token))
		{
			Email = await TokenService.GetUserEmailFromTokenAsync(token);
		}
		else{
			NavigationManager.NavigateTo("/login", true);
		}
	}

	private async Task SendCode()
	{
		try
		{
			var generateCommand = await TwoFactorService.SendCodeAsync(Email);
			if (generateCommand.IsSuccess)
			{
				IsCodeSent = true;
				
				StatusMessage = "Verification code sent to your email.";
			}
			else
			{
				StatusMessage = "Email does not exist.";
			}
		}
		catch (Exception ex)
		{
			StatusMessage = $"Error: {ex.Message}";
		}
	}

	private async Task ValidateCode()
	{
		try
		{
			var isValid = await TwoFactorService.ValidateCode(Email, Code);

			if (isValid.IsSuccess)
			{
				StatusMessage = "Code validated successfully.";
				var preToken = await TokenService.GetPreTokenFromSessionAsync();
				await TokenService.SetTokenAsync(preToken);
				await _sessionStorageService.RemoveItemAsync("preToken");

				var role = await TokenService.GetRoleFromTokenAsync();
				AuthStateService.UserRole = role;

				if (role == "user")
				{
					NavigationManager.NavigateTo("/", true);
					AuthStateService.NotifyAuthenticationStateChanged();
				}
				else if (role == "admin")
				{
					NavigationManager.NavigateTo("/", true);
					AuthStateService.NotifyAuthenticationStateChanged();
				}
			}
			else
			{
				StatusMessage = "Invalid or expired code.";
			}
		}
		catch (Exception ex)
		{
			StatusMessage = $"Error: {ex.Message}";
		}
	}

	private async Task LogoutAndRedirect()
	{
		await _sessionStorageService.RemoveItemAsync("preToken");
		await _sessionStorageService.ClearAsync();  
		await TokenService.RemoveTokenAsync();    
		NavigationManager.NavigateTo("/login", true);
	}
}
