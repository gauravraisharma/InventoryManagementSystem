@page "/signup"
<PageTitle>Sign Up</PageTitle>
@inject NavigationManager NavigationManager
@using IMS.Shared.Interface.Auth
@inject IAuthService AuthService

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-4">
    <MudPaper Class="pa-6 login-card">
        <div class="text-center">
            <img src="/images/logo.png" alt="App Logo" style="width: 280px; margin: 0 auto" @onclick=" NavigateToProductList" />
        </div>
        <MudText Typo="Typo.h4" Class="mb-4 text-center main-title mt-5">Sign Up</MudText>

        <MudForm @ref="form">
            <MudGrid>
               
<MudItem xs="12" sm="6">
                <div>
                <label>First Name</label>
            <MudTextField T="string"
                          Variant="Variant.Outlined"
                          Placeholder="First Name"
                          @bind-Value="model.FirstName"
                          Required="true"
                          RequiredError="First name is required."
                                      Class="mt-2" />
                          </div>
                          </MudItem>
                          <MudItem xs="12" sm="6">
                          <div>
                <label>Last Name</label>
            <MudTextField T="string"
                          Variant="Variant.Outlined"
                          Placeholder="Last Name"
                          @bind-Value="model.LastName"
                          Required="true"
                          RequiredError="Last name is required."
                                      Class="mt-2" />
                          </div>
                          </MudItem>
                           <MudItem xs="12" sm="12">
            <div>
                <label>Username</label>
            <MudTextField T="string"
                          Variant="Variant.Outlined"
                          Placeholder="Username"
                          @bind-Value="model.Username"
                          Required="true"
                          RequiredError="Username is required."
                                      Class="mt-2" />
                          </div>
                          
                           </MudItem>
                          <MudItem xs="12" sm="12">
                          <div>
                <label>Email</label>
            <MudTextField T="string"
                          Variant="Variant.Outlined"
                          Placeholder="Email"
                          @bind-Value="model.Email"
                          Required="true"
                          RequiredError="Email is required."
                          InputType="InputType.Email"
                          Immediate="true"
                          ErrorText="@errorMessage"
                          HelperText="Email must not contain spaces and must be valid."
                                      Class="mt-2" />
</div>
</MudItem>
<MudItem xs="12" sm="12">
<div>
                <label>Password</label>
            <MudTextField T="string"
                          Variant="Variant.Outlined"
                          Placeholder="Password"
                          @bind-Value="model.Password"
                          Required="true"
                          InputType="InputType.Password"
                          RequiredError="Password is required."
                          Immediate="true"
                          HelperText="Password must be at least 8 characters long and include uppercase, lowercase, and a digit."
                          ErrorText="@errorMessage"
                                      Class="mt-2" />
                          </div>
                          </MudItem>
                          </MudGrid>
            <MudText Typo="Typo.body2" Color="Color.Error" Class="mt-2">
                @errorMessage
            </MudText>

            <MudButton Variant="Variant.Filled"
                       DropShadow="false"
                       Class="mt-4 btn-theme"
                       OnClick="HandleSignup">
                Sign Up
            </MudButton>
            <MudText Class="mt-4 text-center">Already have an account? <MudLink OnClick="NavigateToLogin" Class="text-theme">Sign In</MudLink></MudText>
           
        </MudForm>
    </MudPaper>
</MudContainer>
<style>
    .login-card {
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        border-radius: 10px;
        border: 1px solid #eaeaea;
    }

    .btn-theme {
        width: 100%;
        background: darkslateblue;
        color: #fff;
        text-transform: capitalize;
        padding: 8px 16px;
        font-size: 18px;
    }

    .btn-theme:hover {
        background: #FFD700;
        color: #000;
    }

    .text-center {
        text-align: center;
    }

    .text-theme {
        color: darkslateblue;
        font-weight: 500;
    }

    .main-title {
        font-weight: 600;
        color: #000;
    }

    .mud-input > input.mud-input-root-outlined {
        padding: 14px 14px;
    }

    @@media (max-width: 575.98px) {
        .login-page {
            height: unset !important;
            margin-bottom: 20px;
        }
    }
</style>
@code {
    private MudForm form;
    private string errorMessage = string.Empty;
    private SignupModel model = new();

    private async Task HandleSignup()
    {
        await form.Validate();
        if (!form.IsValid)
        {
            errorMessage = "Please fix the validation errors.";
            return;
        }

        var res = await AuthService.Register(model.FirstName, model.LastName, model.Username, model.Email, model.Password);
        if (res.IsSuccess)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "User is not registered.";
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void NavigateToProductList()
    {
        if (!NavigationManager.Uri.EndsWith("/product", StringComparison.OrdinalIgnoreCase))
        {
            NavigationManager.NavigateTo("/product");
        }
    }
    private string ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return "Email is required.";

        if (email.Contains(" "))
            return "Email cannot contain spaces.";

        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email ? null : "Invalid email format.";
        }
        catch
        {
            return "Invalid email format.";
        }
    }

    private string ValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            return "Password is required.";

        if (password.Length < 8)
            return "Password must be at least 8 characters long.";

        if (!password.Any(char.IsUpper))
            return "Password must contain at least one uppercase letter.";

        if (!password.Any(char.IsLower))
            return "Password must contain at least one lowercase letter.";

        if (!password.Any(char.IsDigit))
            return "Password must contain at least one number.";

        return null;
    }

    public class SignupModel
    {
        public string Username { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
