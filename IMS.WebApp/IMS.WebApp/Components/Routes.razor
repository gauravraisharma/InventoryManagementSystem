@inject NavigationManager NavigationManager
@using IMS.WebApp.Client.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthStateService AuthStateService
@inject ITokenService TokenService
@using IMS.WebApp.Client.Pages.Admin
@using IMS.WebApp.Client.Pages.Order
@using IMS.WebApp.Client.Pages.Customer
@using IMS.WebApp.Client.Pages.Products
@using IMS.WebApp.Client.Pages.UnAuthorize

<CascadingAuthenticationState>
	<Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="new[] { typeof(Client._Imports).Assembly }">
		<Found Context="routeData">
			@if (IsAuthenticated)
			{
				if (CanAccess(routeData.PageType))
				{
					if (UserRole == "admin")
					{
						<RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />
					}
					else
					{
						<RouteView RouteData="routeData" DefaultLayout="typeof(Layout.Public.PublicLayout)" />
					}
				}
				else
				{
					<AccessDenied />
				}
			}
			else
			{
				if (IsLoginUrl || IsSignupUrl || IsValidateUrl)
				{
					<RouteView RouteData="routeData" DefaultLayout="typeof(Layout.Public.LoginLayout)" />
				}
				else
				{
					<RouteView RouteData="routeData" DefaultLayout="typeof(Layout.Public.PublicLayout)" />
				}
			}
			<FocusOnNavigate RouteData="routeData" Selector="h1" />
		</Found>

		<NotFound>
			<NotFoundPage />
		</NotFound>
	</Router>
</CascadingAuthenticationState>

@code {
	private bool IsAuthenticated { get; set; }
	private string UserRole { get; set; } = string.Empty;

	private bool IsLoginUrl => NavigationManager.Uri.EndsWith("/login", StringComparison.OrdinalIgnoreCase);
	private bool IsSignupUrl => NavigationManager.Uri.EndsWith("/signup", StringComparison.OrdinalIgnoreCase);
	private bool IsValidateUrl => NavigationManager.Uri.EndsWith("/validate", StringComparison.OrdinalIgnoreCase);

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthStateService.GetAuthenticationStateAsync();
		IsAuthenticated = authState.User.Identity.IsAuthenticated;
		UserRole = await TokenService.GetRoleFromTokenAsync();

		AuthStateService.UserRole = UserRole;
	}

	private bool CanAccess(Type pageType)
	{
		// Pages accessible only by admin
		var restrictedForUsers = new[] { typeof(AdminDashboard), typeof(OrderList), typeof(CustomerList) };

		if (UserRole == "user" && restrictedForUsers.Contains(pageType))
		{
			return false;
		}

		return true;
	}

	private void RedirectToLogin()
	{
		NavigationManager.NavigateTo("/login", true);
	}
}
