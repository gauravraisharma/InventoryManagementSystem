@page "/order-summary"
@rendermode InteractiveServer
@inject CartStateService CartStateService
@inject IOrderService OrderService
@inject ITokenService TokensService
@inject IAddressService AddressService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using IMS.Shared.Interface.Address
@using IMS.Shared.Interface.Order
@using IMS.Shared.RequestDto
@using IMS.Shared.RequestDto.orderDTOs
@using IMS.Shared.Services.Cart
@using IMS.Shared.Services.Order
@using IMS.WebApp.Client.Authentication
@using MudBlazor
@using IMS.Shared.RequestDto.CartDTOs;
@using IMS.Shared.Services.Shared;
@using IMS.Shared.Services.Cart;
@inject IJSRuntime JSRuntime


<MudPopoverProvider />
<MudSnackbarProvider />

<div class="order-summary-container">
	<MudCard Class="pa-5 order-summary-card" Style="max-width: 600px; width: 100%;">
		<MudText Typo="Typo.h6" Class="mb-1">Order Summary</MudText>

		@if (Products != null && Products.Any())
		{
			@foreach (var product in Products)
			{
				<MudGrid Class="mb-2 tight-spacing">
					<MudItem xs="9">
						<MudText Typo="Typo.body1" Class="font-weight-bold">@product.ProductName</MudText>
					</MudItem>
					<MudItem xs="3" Class="text-right">
						<MudText Typo="Typo.body1" Class="font-weight-bold">x @product.Quantity</MudText>
					</MudItem>
				</MudGrid>
			}

			<MudGrid Class="mb-1">
				<MudItem xs="9">
					<MudText Typo="Typo.body2" Style="color: gray;">Shipping</MudText>
				</MudItem>
				<MudItem xs="3" Class="text-right no-gap">
					<MudText Typo="Typo.body2" Class="font-weight-bold">Free</MudText>
				</MudItem>
			</MudGrid>

			<MudDivider Class="my-1" />

			<MudGrid Class="mt-1 mb-2">
				<MudItem xs="9">
					<MudText Typo="Typo.h6">Total</MudText>
				</MudItem>
				<MudItem xs="3" Class="text-right no-gap">
					<MudText Typo="Typo.h6" Class="font-weight-bold">@($"₹{TotalPrice:0.00}")</MudText>
				</MudItem>
			</MudGrid>

			@if (Address != null)
			{
				<MudDivider Class="my-1" />
				<MudText Typo="Typo.body1" Class="mt-2">Deliver to:</MudText>
				<MudText Typo="Typo.body2" Class="font-weight-bold">
					@Address.Street, @Address.City
				</MudText>
			}

			<MudDivider Class="my-2" />

			<MudPaper >
				<MudLink Href="/addresses" Class="ml-2">Add New Address</MudLink>
			</MudPaper>

			<!-- Scrollable Address List -->
			@if (Addresses != null && Addresses.Any())
			{
				<MudText Typo="Typo.body1" Class="mt-0">Select Address:</MudText>
				<MudRadioGroup T="AddressDTO" @bind-Value="Address" OptionChanged="UpdateDefaultAddress">
					<MudPaper Class="address-list-container" Style="max-height: 200px; overflow-y: auto;">
						@foreach (var addr in Addresses)
						{
							<MudRadio T="AddressDTO" Value="addr">
                <MudText Typo="Typo.body2">@addr.Street, @addr.City</MudText>
            </MudRadio>
						}
					</MudPaper>
				</MudRadioGroup>
			}
			else{

			}

			<MudButton Variant="Variant.Filled" Color="Color.Success" Class="mb-2" OnClick="@(() => ProceedToPayment())" FullWidth>
				Continue to secure payment
			</MudButton>
		}
		else
		{
			<MudText Typo="Typo.subtitle1" Class="text-danger text-center">No items to display</MudText>
		}

		<MudLink Href="/view-cart" Class="cancel-payment-link text-center d-block" Style="color: black; font-weight: bold;">
			Cancel payment
		</MudLink>
	</MudCard>
</div>

<style>
	.order-summary-container {
		display: flex;
		justify-content: center;
		align-items: flex-start;
		min-height: 100vh;
		padding-top: 50px;
		padding-left: 80px;
		padding-right: 10px;
	}

	.order-summary-card {
		width: 100%;
		max-width: 550px;
		box-sizing: border-box;
	}

	.address-list-container {
		border: 1px solid #ddd;
		border-radius: 4px;
		padding: 8px;
		margin-top: 8px;
	}

	.cancel-payment-link {
		margin-top: 20px;
	}

	.text-center {
		text-align: center;
	}
</style>

@code {
	private List<CartDto> Products = new();
	private decimal TotalPrice => Products.Sum(p => p.TotalPrice);
	public string Id { get; set; }
	private AddressDTO? Address { get; set; }
	private List<AddressDTO>? Addresses { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Products = CartStateService.GetCartItems();
		Id = await TokensService.GetUserIdFromTokenAsync();
		await LoadPrimaryAddress();
		await LoadAllAddress();
	}

	private async Task LoadPrimaryAddress()
	{
		var res = await AddressService.GetPrimaryAddressByUserId(Id);
		if (res.IsSuccess)
		{
			Address = res.Result;
			StateHasChanged();
		}
	}

	private async Task LoadAllAddress()
	{
		var res = await AddressService.GetAddressesByUserIdAsync(Id);
		if (res.IsSuccess)
		{
			Addresses = res.Result;
			StateHasChanged();
		}
	}

	private void UpdateDefaultAddress(AddressDTO? selectedAddress)
	{
		if (selectedAddress != null)
		{
			Address = selectedAddress;
			Snackbar.Add($"Address updated to: {Address.Street}, {Address.City}", Severity.Success);
		}
	}

	private async Task ProceedToPayment()
	{
		try
		{
			var sessionUrl = await CreateStripeCheckoutSession();
			if (!string.IsNullOrEmpty(sessionUrl))
			{
				await JSRuntime.InvokeVoidAsync("open", sessionUrl, "_self");
			}
			else
			{
				Snackbar.Add("Failed to create session. Please try again.", Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error creating payment session: {ex.Message}");
			Snackbar.Add("Error initiating payment. Please try again.", Severity.Error);
		}
	}

	
	private async Task<string> CreateStripeCheckoutSession()
	{
		try
		{
			// Check if primary address is set
			if (Address == null || Address.Id == null || Address.Id == null) // Consider checking if Address.Id is valid
			{
				Snackbar.Add("Please set a primary address before proceeding with payment.", Severity.Warning);
				return null; // Early return to prevent further execution
			}

			var orderRequest = new AddOrderDto
				{
					CustomerId = Id,
					OrderDate = DateTime.Now,
					AddressId = Address.Id,
					TotalAmount = TotalPrice,
					ProductDetails = Products.Select(product => new OrderProductDetails
					{
						ProductId = product.ProductId,
						Quantity = product.Quantity,
						Amount = product.TotalPrice,
						Title = product.ProductName,
						Name = product.ProductName,
						UnitAmount = product.UnitPrice,
						ItemSize = product.ProductSize
					}).ToList()
				};

			var response = await OrderService.CreateStripeCheckoutSessionAsync(orderRequest);
			if (response.IsSuccess)
			{
				return response.Result;
			}
			else
			{
				Snackbar.Add($"Failed to create payment session: {response.Message}", Severity.Error);
				return null;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error creating Stripe session: {ex.Message}");
			Snackbar.Add("Error initiating payment session. Please try again.", Severity.Error);
			return null;
		}
	}


}

