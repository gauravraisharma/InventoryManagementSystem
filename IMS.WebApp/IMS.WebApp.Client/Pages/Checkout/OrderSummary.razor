@page "/order-summary"
<PageTitle>Order Summary </PageTitle>
@rendermode InteractiveServer
@inject CartStateService CartStateService
@inject IOrderService OrderService
@inject ITokenService TokensService
@inject IAddressService AddressService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using IMS.Shared.Interface.Address
@using IMS.Shared.Interface.Order
@using IMS.Shared.RequestDto
@using IMS.Shared.RequestDto.orderDTOs
@using IMS.Shared.Services.Cart
@using IMS.Shared.Services.Order
@using IMS.WebApp.Client.Authentication
@using MudBlazor
@using IMS.Shared.RequestDto.CartDTOs;
@using IMS.Shared.Services.Shared;
@using IMS.Shared.Services.Cart;
@inject IJSRuntime JSRuntime


<MudPopoverProvider />
<MudSnackbarProvider />

<div class="order-summary-container">
	<MudCard Class="pa-4 order-summary-card card-item" Style="max-width: 600px; width: 100%;">
		<MudText Typo="Typo.h5" Class="mb-3 font-weight-bold">Order Summary</MudText>

		@if (Products != null && Products.Any())
		{
			@foreach (var product in Products)
			{
				<MudGrid Class="mb-2">
					<MudItem xs="6">
						<MudText Typo="Typo.body1" Class="font-weight-bold">@product.ProductName</MudText>
					</MudItem>
					<MudItem xs="6" Class="text-right">
						<MudText Typo="Typo.body1">x @product.Quantity</MudText>
					</MudItem>
				</MudGrid>
			}

			<MudGrid Class="mb-1">
				<MudItem xs="6">
					<MudText Typo="Typo.body2" Style="color: gray;">Shipping</MudText>
				</MudItem>
				<MudItem xs="6" Class="text-right">
					<MudText Typo="Typo.body2" Class="font-weight-bold">Free</MudText>
				</MudItem>
			</MudGrid>

			<MudDivider Class="my-2" />

			<MudGrid Class="mt-1 mb-2">
				<MudItem xs="6">
					<MudText Typo="Typo.h6">Total</MudText>
				</MudItem>
				<MudItem xs="6" Class="text-right">
					<MudText Typo="Typo.h6" Class="font-weight-bold">@($"₹{TotalPrice:0.00}")</MudText>
				</MudItem>
			</MudGrid>

			@if (Address != null)
			{
				<MudDivider Class="my-2" />
				<MudText Typo="Typo.body1">Deliver to:</MudText>
				<MudText Typo="Typo.body2" Class="font-weight-bold">@Address.Street, @Address.City</MudText>
			}

			<MudDivider Class="my-3" />

			<MudText Typo="Typo.body1">
				Select Address or
				<MudLink Href="/addresses" Class="ml-1">Add new Address</MudLink>
			</MudText>

			@if (Addresses != null && Addresses.Any())
			{
				<MudRadioGroup T="AddressDTO" Value="@SelectedAddress" ValueChanged="UpdateDefaultAddress">
					<MudPaper Class="address-list-container p-2" Style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; border-radius: 4px;">
						@foreach (var addr in Addresses)
						{
							<MudRadio T="AddressDTO" Value="addr" Class="mb-1">
								<MudText Typo="Typo.body2">@addr.Street, @addr.City</MudText>
							</MudRadio>
						}
					</MudPaper>
				</MudRadioGroup>

			}
			else
			{
				<MudText Typo="Typo.body2" Class="mt-2 text-secondary">No addresses available. Please add an address.</MudText>
			}

			<MudButton Variant="Variant.Filled" Color="Color.Success" Class="mt-5" OnClick="@(() => ProceedToPayment())" FullWidth>
				Continue to Secure Payment
			</MudButton>
		}
		else
		{
			<MudText Typo="Typo.subtitle1" Class="text-danger text-center">No items to display</MudText>
		}

		<MudLink Href="/view-cart" Class="text-center d-block mt-3" Style="color: black; font-weight: bold;">
			Cancel Payment
		</MudLink>
	</MudCard>
</div>


<style>
	.order-summary-container {
		display: flex;
		justify-content: center;
		align-items: flex-start;
		min-height: calc(100vh - 140px);
		padding: 50px 80px;
	}

	.order-summary-card {
		width: 100%;
		max-width: 550px;
		box-sizing: border-box;
	}

	.address-list-container {
		border: 1px solid #ddd;
		border-radius: 4px;
		padding: 8px;
		margin-top: 8px;
	}

	.cancel-payment-link {
		margin-top: 20px;
	}

	.text-center {
		text-align: center;
	}

	.text-right {
		text-align: right;
	}

	.card-item {
		box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
		border-radius: 10px;
		border: 1px solid #eaeaea;
		margin-bottom: 20px;
		overflow: hidden;
	}

	@@media (max-width: 540px) {
		.order-summary-container {
			padding: 20px 10px;
			min-height: unset;
		}
	}
</style>

@code {
	private List<CartDto> Products = new();
	private decimal TotalPrice => Products.Sum(p => p.TotalPrice);
	public string Id { get; set; }
	private AddressDTO? Address { get; set; }
	private List<AddressDTO>? Addresses { get; set; }
	AddressDTO SelectedAddress { get; set; }
	protected override async Task OnInitializedAsync()
	{
		Products = CartStateService.GetCartItems();
		Id = await TokensService.GetUserIdFromTokenAsync();
		//await LoadPrimaryAddress();
		await LoadAllAddress();
	}

	private async Task LoadPrimaryAddress()
	{
		var res = await AddressService.GetPrimaryAddressByUserId(Id);
		if (res.IsSuccess)
		{
			Address = res.Result;
			StateHasChanged();
		}
	}

	private async Task LoadAllAddress()
	{
		var res = await AddressService.GetAddressesByUserIdAsync(Id);
		if (res.IsSuccess)
		{
			Addresses = res.Result;
			SelectedAddress = Addresses?.FirstOrDefault(addr => addr.IsActive);
			Address = SelectedAddress;
			StateHasChanged();
		}
	}

	private void UpdateDefaultAddress(AddressDTO? selectedAddress)
	{
		if (selectedAddress != null)
		{
			SelectedAddress = selectedAddress; 
			Address = selectedAddress; 
		}
	}

	private async Task ProceedToPayment()
	{
		try
		{
			if (Addresses != null && Addresses.Any() && !Addresses.Contains(Address))
			{
				Snackbar.Add("Please select an address", Severity.Warning);
				return;
			}
			if (Address == null || string.IsNullOrWhiteSpace(Address.Id))
			{
				Snackbar.Add("Please select an address", Severity.Warning);
				return;
			}
			var sessionUrl = await CreateStripeCheckoutSession();
			if (!string.IsNullOrEmpty(sessionUrl))
			{
				await JSRuntime.InvokeVoidAsync("open", sessionUrl, "_self");
			}
			else
			{
				Snackbar.Add("Failed to create session. Please try again.", Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error creating payment session: {ex.Message}");
			Snackbar.Add("Error initiating payment. Please try again.", Severity.Error);
		}
	}

	
	private async Task<string> CreateStripeCheckoutSession()
	{
		try
		{

			var orderRequest = new AddOrderDto
				{
					CustomerId = Id,
					OrderDate = DateTime.Now,
					AddressId = Address.Id,
					TotalAmount = TotalPrice,
					ProductDetails = Products.Select(product => new OrderProductDetails
					{
						ProductId = product.ProductId,
						Quantity = product.Quantity,
						Amount = product.TotalPrice,
						Title = product.ProductName,
						Name = product.ProductName,
						UnitAmount = product.UnitPrice,
						ItemSize = product.ProductSize
					}).ToList()
				};

			var response = await OrderService.CreateStripeCheckoutSessionAsync(orderRequest);
			if (response.IsSuccess)
			{
				return response.Result;
			}
			else
			{
				Snackbar.Add($"Failed to create payment session: {response.Message}", Severity.Error);
				return null;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error creating Stripe session: {ex.Message}");
			Snackbar.Add("Error initiating payment session. Please try again.", Severity.Error);
			return null;
		}
	}


}

