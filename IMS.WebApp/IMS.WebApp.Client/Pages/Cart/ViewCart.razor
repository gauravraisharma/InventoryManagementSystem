@page "/view-cart"
@using IMS.Shared.RequestDto.CartDTOs
@using IMS.Shared.Services.Shared
@using IMS.WebApp.Client.Authentication
@using MudBlazor
@inject ICartService CartService
@inject CartStateService CartStateService
@using IMS.Shared.Interface.Cart
@inject ITokenService TokenService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthStateService AuthStateService


<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <!-- Product List -->
        <MudItem xs="12" md="8">
            <MudCard Class="p-3">
                <MudText Typo="Typo.h5" Class="mb-3">Shopping Cart</MudText>
                @if (cart != null && cart.Any())
                {
                    @foreach (var item in cart)
                    {
                        <MudPaper Class="d-flex align-center p-2 mb-2">
                            <MudCarousel TData="string" AutoCycle="true" Class="mr-3" Style="height: 200px; width: 200px;">
                                <Items>
                                    @foreach (var imageUrl in item.ProductImageUrls)
                                    {
                                        <MudCarouselItem>
                                            <MudImage Src="@($"data:image/jpeg;base64,{imageUrl}")" 
                                            Alt="@item.ProductName" 
                                            Style="width: 100%; height: 100%; object-fit: cover;" />
                                        </MudCarouselItem>
                                    }
                                </Items>
                            </MudCarousel>

                            <MudStack>
                                <MudText Typo="Typo.h6" hidden >@item.CartId</MudText>
                                <MudText Typo="Typo.h6">@item.ProductName</MudText>
                                <MudText Typo="Typo.subtitle1">Size: @item.ProductSize</MudText>
                                <MudText Typo="Typo.subtitle2" Class="text-success">In Stock</MudText>
                                <MudText Typo="Typo.body1">
                                    <span class="font-weight-bold">@($"₹{item.UnitPrice:0.00}")</span>
                                </MudText>
                                <MudGrid Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                                    <MudItem>
                                        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => UpdateQuantity(item, -1)">-</MudButton>
                                    </MudItem>
                                    <MudItem>
                                        <MudText>@item.Quantity</MudText>
                                    </MudItem>
                                    <MudItem>
                                        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => UpdateQuantity(item, 1)">+</MudButton>
                                    </MudItem>
                                    <MudItem>
                                        <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => RemoveItem(item.CartId)">Delete</MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudStack>
                        </MudPaper>
                    }
                }
                else
                {
                    <MudText Typo="Typo.subtitle1" Class="text-danger">No items in the cart</MudText>
                }
            </MudCard>
        </MudItem>

        <!-- Cart Summary -->
        <MudItem xs="12" md="4">
            <MudCard Class="p-3">
                <MudText Typo="Typo.h6">Cart Summary</MudText>
                <MudDivider Class="my-2" />
                @if (cart != null && cart.Any())
                {
                    var totalItems = cart.Sum(i => i.Quantity);
                    var totalPrice = cart.Sum(i => i.TotalPrice);
                    <MudStack Spacing="2">
                        <MudText Typo="Typo.body1">
                            Subtotal (@totalItems item(s)):
                            <span class="text-danger">@($"₹{totalPrice:0.00}")</span>
                        </MudText>
                        <MudText Typo="Typo.subtitle2" Class="text-success">Free Delivery Available</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="@(() =>ProceedToBuy())">Proceed to Buy</MudButton>
                    </MudStack>
                }
                else
                {
                    <MudText Typo="Typo.subtitle1" Class="text-danger">No items to summarize</MudText>
                }
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string errorMessage;
    public string Id { get; set; }
    private List<CartDto> cart = new List<CartDto>();
    private bool IsAuthenticated { get; set; }
    protected override async Task OnInitializedAsync()
    {

        try
        {
            var authState = await AuthStateService.GetAuthenticationStateAsync();
            IsAuthenticated = authState.User.Identity.IsAuthenticated;
            if (!IsAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Id = await TokenService.GetUserIdFromTokenAsync();
            if (!string.IsNullOrEmpty(Id))
            {

                var response = await CartService.GetCartDetailsByUserIdAsync(Id);

                if (response.IsSuccess)
                {

                    var fetchedProduct = response;
                    if (fetchedProduct != null)
                    {
                        foreach (var items in fetchedProduct.Result)
                        {

                            var item = new CartDto
                                    {
                                        ProductId= items.ProductId,
                                        CartId = items.CartId,
                                        ProductName = items.ProductName,
                                        ProductDescription = items.ProductDescription,
                                        Quantity = items.Quantity,
                                        TotalPrice = items.TotalPrice,
                                        UnitPrice = items.UnitPrice,
                                        ProductImageUrls = items.ProductImageUrls,
                                        ProductSize = items.ProductSize
                                    };
                            cart.Add(item);
                        }


                    }
                }
                else
                {
                    errorMessage = response.Message ?? "Failed to fetch product details.";
                }
            }

        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task GetUserCartDetailsByUserIdAsync()
    {
        try
        {
            var response = await CartService.GetCartDetailsByUserIdAsync(Id);

            if (response.IsSuccess)
            {
                cart.Clear();
                var fetchedProduct = response;
                if (fetchedProduct != null)
                {
                    foreach (var items in fetchedProduct.Result)
                    {

                        var item = new CartDto
                            {
                                CartId = items.CartId,
                                ProductName = items.ProductName,
                                ProductDescription = items.ProductDescription,
                                Quantity = items.Quantity,
                                TotalPrice = items.TotalPrice,
                                UnitPrice = items.UnitPrice,
                                ProductImageUrls = items.ProductImageUrls,
                                ProductSize = items.ProductSize
                            };
                        cart.Add(item);
                    }


                }
            }
            else
            {
                errorMessage = response.Message ?? "Failed to fetch product details.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private async Task  UpdateQuantity(CartDto item, int change)
    {
        item.Quantity = Math.Max(1, item.Quantity + change);
        item.TotalPrice = item.Quantity * item.UnitPrice;
        var response = await CartService.UpdateCart(item.CartId, item.Quantity);
        if (response.IsSuccess)
        {
            Snackbar.Add("Item Updated successfully", Severity.Success);

        }
        else
        {
            Snackbar.Add(response.Message, Severity.Error);
        }

    }
    private async Task RemoveItem(string id)
    {
        var response = await CartService.DeleteCartItem(id);
        if (response.IsSuccess)
        {
            Snackbar.Add("Item Removed Successfully", Severity.Success);
            await GetUserCartDetailsByUserIdAsync();

        }
        else
        {
            Snackbar.Add($"Error: {response.Message}", Severity.Error);
        }
    }

    public async Task ProceedToBuy()
    {
        CartStateService.SetCartItems(cart);
        NavigationManager.NavigateTo("/order-summary");
    }
}
