@page "/order-summary"
@rendermode InteractiveServer
@inject CartStateService CartStateService
@inject IOrderService OrderService
@inject ITokenService TokensService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using IMS.Shared.Interface.Order
@using IMS.Shared.RequestDto.orderDTOs
@using IMS.Shared.Services.Cart
@using IMS.Shared.Services.Order
@using IMS.WebApp.Client.Authentication
@using MudBlazor
@using IMS.Shared.RequestDto.CartDTOs;
@using IMS.Shared.Services.Shared;
@using IMS.Shared.Services.Cart;



<MudPopoverProvider />
<div class="order-summary-container">
    <MudCard Class="pa-5 order-summary-card" Style="max-width: 600px; width: 100%;">
        <MudText Typo="Typo.h6" Class="mb-1">Order Summary</MudText>
        <MudText Typo="Typo.body2" Class="mb-4" Style="color: gray;">
            Order reference: <b>@OrderReference</b>
        </MudText>

        @if (Products != null && Products.Any())
        {
            @foreach (var product in Products)
            {
                <MudGrid Class="mb-2 tight-spacing">
                    <MudItem xs="9">
                        <MudText Typo="Typo.body1" Class="font-weight-bold">@product.ProductName</MudText>
                    </MudItem>
                    <MudItem xs="3" Class="text-right">
                        <MudText Typo="Typo.body1" Class="font-weight-bold">x @product.Quantity</MudText>
                    </MudItem>
                </MudGrid>
            }

            <MudGrid Class="mb-1">
                <MudItem xs="9">
                    <MudText Typo="Typo.body2" Style="color: gray;">Shipping</MudText>
                </MudItem>
                <MudItem xs="3" Class="text-right no-gap">
                    <MudText Typo="Typo.body2" Class="font-weight-bold">Free</MudText>
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-1" />

            <MudGrid Class="mt-1 mb-2">
                <MudItem xs="9">
                    <MudText Typo="Typo.h6">Total</MudText>
                </MudItem>
                <MudItem xs="3" Class="text-right no-gap">
                    <MudText Typo="Typo.h6" Class="font-weight-bold">@($"₹{TotalPrice:0.00}")</MudText>
                </MudItem>
            </MudGrid>

            <MudButton Variant="Variant.Filled" Color="Color.Success" Class="mb-2" OnClick="@(() => SaveOrder())" FullWidth>
                Continue to secure payment
            </MudButton>
        }
        else
        {
            <MudText Typo="Typo.subtitle1" Class="text-danger text-center">No items to display</MudText>
        }

        <MudLink Href="/view-cart" Class="cancel-payment-link text-center d-block" Style="color: black; font-weight: bold;">
            Cancel payment
        </MudLink>
    </MudCard>
</div>

<style>
    .order-summary-container {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    min-height: 100vh;
    padding-top: 50px;
    padding-left: 80px;
    padding-right: 10px;
    }

    .order-summary-card {
    width: 100%;
    max-width: 550px;
    box-sizing: border-box;
    }

    .no-gap {
    margin: 0;
    }

    .tight-spacing {
    margin-bottom: 4px;
    }

    .cancel-payment-link {
    margin-top: 20px;
    }

    .text-center {
    text-align: center;
    }
</style>

@code {
    private List<CartDto> Products = new();
    private decimal TotalPrice => Products.Sum(p => p.TotalPrice);
    private string OrderReference => Guid.NewGuid().ToString().Substring(0, 8).ToUpper();
    public string Id { get; set; }
    protected override void OnInitialized()
    {
        Products = CartStateService.GetCartItems();
    }

    private async Task SaveOrder()
    {
        try
        {
            Id = await TokensService.GetUserIdFromTokenAsync();
            var orderRequest = new AddOrderDto
                {
                    CustomerId = Id,
                    OrderDate = DateTime.Now,
                    TotalAmount = TotalPrice,
                    ProductDetails = Products.Select(product => new OrderProductDetails
                    {
                        ProductId = product.ProductId,
                        Quantity = product.Quantity,
                        Amount = product.TotalPrice,
                        Title = product.ProductName
                    }).ToList()
                };

            var response=await OrderService.SaveOrderAsync(orderRequest);
            if (response.IsSuccess)
            {

                Snackbar.Add("Order Completed ", Severity.Success);
                NavigationManager.NavigateTo("/product");


            }
            else
            {
                // Snackbar.Add($"Error: {response.Errors}", Severity.Error);
                var errorMessage = response.Errors != null && response.Errors.Any()
            ? string.Join(", ", response.Errors)
            : "An unknown error occurred.";
                Snackbar.Add($"Error: {errorMessage}", Severity.Error);
            }
            NavigationManager.NavigateTo("/product");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving order: {ex.Message}");
        }
    }

}
