@page "/product"
 @rendermode InteractiveServer
@inject IProductService ProductService
@inject IDepartmentService DepartmentService
@inject ICategoryService CategoryService
@* @inject IDialogService DialogService *@
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using IMS.Shared.Common
@using IMS.Shared.Interface
@using IMS.Shared.Interface.Category
@using IMS.Shared.Interface.Department
@using IMS.Shared.Interface.Product
@using IMS.Shared.RequestDto.DepartmentDTOs
@using IMS.Shared.RequestDto.ProductDTOs
@using IMS.Shared.RequestDto.DepartmentDTOs
@using IMS.Shared.RequestDto.CategoryDTOs
@using System.Text


<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />



<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Header Section -->
    <div style="position: sticky; top: 0; z-index: 10; background-color: white; box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.h5">Products</MudText>
                <div class="d-flex gap-2">
                    <MudButton @onclick="OpenAddProductDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
                        Add Product
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                    Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.Upload"
                    Href="/export">
                        IMPORT PRODUCT
                    </MudButton>
                </div>
            </MudItem>
        </MudGrid>
        <!-- Filters Section -->
        <MudGrid Class="mt-4">
            <MudItem xs="12" md="3">
                <MudSelect T="string"
                Label="Department"
                Variant="Variant.Outlined"
                @bind-Value="selectedDepartment"
                @bind-Value:after="@(() => GetAllProducts())"
                Dense="true">
                    <MudSelectItem Value="@("all")">Pick a Department</MudSelectItem>
                    @foreach (var department in _departments)
                    {
                        <MudSelectItem Value="@department.Name">@department.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudSelect T="string"
                Label="Category"
                Variant="Variant.Outlined"
                @bind-Value="selectedCategory"
                @bind-Value:after="@(() => GetAllProducts())"
                Dense="true">
                    <MudSelectItem Value="@("all")">Pick a Category</MudSelectItem>
                    @foreach (var category in _categories)
                    {
                        <MudSelectItem Value="@category.Name">@category.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField T="string"
                Label="Search"
                Variant="Variant.Outlined"
                Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search"
                @bind-Value="searchText"
                @bind-Value:after="@(() => GetAllProducts())"
                Dense="true" />
            </MudItem>
            <MudItem xs="12" md="2">
                <MudSelect T="string"
                Label="Sort By"
                Variant="Variant.Outlined"
                @bind-Value="selectedSort"
                @bind-Value:after="@(() => GetAllProducts())"
                Dense="true">
                    <MudSelectItem Value="@("newest")">Newest First</MudSelectItem>
                    <MudSelectItem Value="@("oldest")">Oldest First</MudSelectItem>
                </MudSelect>
            </MudItem>
        </MudGrid>
    </div>

    <!-- Products Grid -->
    <MudGrid Class="mt-4">
        @if (_products.Count == 0)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.body1">No products available.</MudText>
            </MudItem>
        }
        else
        {
            @foreach (var product in _products)
            {
                <MudItem xs="12" sm="6" md="3">
                    <MudCard>
                        <MudCardContent Style="height: 400px; overflow: hidden;">
                            @if (product.ProductImages?.Any() == true)
                            {
                                <div style="height: 200px; overflow: hidden;">
                                    <img src="@($"data:image/jpeg;base64,{product.ProductImages.First()}")"
                                    alt="Product Image"
                                    class="mt-2"
                                    style="width: 100%; height: 100%; object-fit: cover;" />
                                </div>
                            }
                            else
                            {
                                <MudText Typo="Typo.body2" Class="mt-2">No image available</MudText>
                            }

                            <MudText Typo="Typo.h6">@product.Title</MudText>
                            <MudText Typo="Typo.body2">
                                @string.Join(", ", product.DepartmentNames)
                            </MudText>

                            <div style="max-height: 100px; overflow-y: auto;">
                                <MudText Typo="Typo.body2" Class="mt-4">@product.Description</MudText>
                            </div>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-space-between">
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenEditProductDialogAsync(product.Id)">
                                EDIT
                            </MudButton>
                            <div>
                                @* <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Default" /> *@
                                <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                Color="Color.Default"
                                OnClick="@(() => NavigateToProductDetails(product.Id))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteProductDetails(product.Id))" />
                            </div>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>


<style>
    .custom-dialog {
    max-width: 800px;
    width: 90%;
    }
</style>


@code {
    [Parameter]
    public string productId { get; set; }
    private string selectedDepartment = "all";
    private string selectedCategory = "all";
    private string selectedSort = "newest";
    private string searchText = "";
    private List<GetAllProductDto> _products = new();
    private List<GetAllDepartmentDto> _departments = new();
    private List<GetAllCategoryDto> _categories = new();
    private string errorMessage;
    private bool _isLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadInitialData();
        }
    }

    private async Task LoadInitialData()
    {
        try
        {
            var departmentResponse = await DepartmentService.GetAllDepartmentAsync();
            if (departmentResponse.IsSuccess)
            {
                _departments = departmentResponse.Result;
            }
            else
            {
                errorMessage = departmentResponse.Message;
                return;
            }

            var categoryResponse = await CategoryService.GetAllCategoryAsync();
            if (categoryResponse.IsSuccess)
            {
                _categories = categoryResponse.Result;
            }
            else
            {
                errorMessage = categoryResponse.Message;
                return;
            }

            await GetAllProducts();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public async Task GetAllProducts()
    {
        var response = await ProductService.GetAllProductsAsync(selectedDepartment, selectedCategory, searchText, selectedSort);
        if (response.IsSuccess)
        {
            _products = response.Result;
            StateHasChanged();
        }
        else
        {
            errorMessage = response.Message;
        }
    }
    private void NavigateToProductDetails(string id)
    {
        var encodedId = Convert.ToBase64String(Encoding.UTF8.GetBytes(id));
        NavigationManager.NavigateTo($"/product-details/{encodedId}");
    }
    private async Task DeleteProductDetails(string id)
    {
        var response = await ProductService.DeleteProductByIdAsync(id);
        if (response.IsSuccess)
        {
            Snackbar.Add($"Product Deleted Successfully: {response.Message}", Severity.Success);
            StateHasChanged();
        }
        else
        {
            Snackbar.Add($"Error: {response.Message}", Severity.Error);
        }
    }

    private async Task OpenAddProductDialogAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var parameters = new DialogParameters
    {
        { "OnProductSaved", EventCallback.Factory.Create(this, RefreshProductList) }
    };

        var dialog = DialogService.Show<ProductFormDialog>("Add Product", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshProductList();
        }
    }

    private async Task OpenEditProductDialogAsync(string productId)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var parameters = new DialogParameters
    {
        { "Id", productId },
        { "OnProductSaved", EventCallback.Factory.Create(this, RefreshProductList) }
    };

        var dialog = DialogService.Show<ProductFormDialog>("Edit Product", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshProductList();
        }
    }

    private async Task RefreshProductList()
    {
        await GetAllProducts();
    }






}