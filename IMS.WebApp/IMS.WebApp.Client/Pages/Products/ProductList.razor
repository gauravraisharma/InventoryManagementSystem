@page "/product"
<PageTitle>Home</PageTitle>
 @rendermode InteractiveServer
@inject IProductService ProductService
@inject IDepartmentService DepartmentService
@inject ICategoryService CategoryService
@* @inject IDialogService DialogService *@
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthStateService AuthStateService
@inject IJSRuntime JSRuntime
@using IMS.Shared.Common
@using IMS.WebApp.Client.Authentication
@using IMS.Shared.Interface
@using IMS.Shared.Interface.Category
@using IMS.Shared.Interface.Department
@using IMS.Shared.Interface.Product
@using IMS.Shared.RequestDto.DepartmentDTOs
@using IMS.Shared.RequestDto.ProductDTOs
@using IMS.Shared.RequestDto.DepartmentDTOs
@using IMS.Shared.RequestDto.CategoryDTOs
@using System.Text
@using System.Text.Json


<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />



<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Header Section -->
    <MudGrid>
        <MudItem xs="12" Class="d-flex justify-end align-center">
            @if (AuthStateService.UserRole == "admin")
            {
                <div class="d-flex gap-2">
                    <MudButton @onclick="OpenAddProductDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
                        Add Product
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                    Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.Upload"
                    Href="/export">
                        IMPORT PRODUCT
                    </MudButton>
                </div>
            }
        </MudItem>
    </MudGrid>

    <!-- Products Section -->
    <MudGrid Class="product-listing">
        <MudItem lg="2" sm="12">
            <!-- Filters Section -->
            <div>
                <MudText Typo="Typo.h5" Class="section-title">Filters</MudText>
                <MudGrid Class="mt-4">
                    <MudItem lg="12" sm="3" xs="12">
                        <MudTextField T="string"
                        Label="Search"
                        Variant="Variant.Outlined"
                        Adornment="Adornment.Start"
                        AdornmentIcon="@Icons.Material.Filled.Search"
                        @bind-Value="searchText"
                        @bind-Value:after="@(() => ResetAndLoadProducts())"
                        Dense="true" />
                    </MudItem>
                    <MudItem lg="12" sm="3" xs="12">
                        <MudSelect T="string"
                        Label="Department"
                        Variant="Variant.Outlined"
                        @bind-Value="selectedDepartment"
                        @bind-Value:after="@(() => ResetAndLoadProducts())"
                        Dense="true">
                            <MudSelectItem Value="@("All")"></MudSelectItem>
                            @foreach (var department in _departments)
                            {
                                <MudSelectItem Value="@department.Name">@department.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem lg="12" sm="3" xs="12">
                        <MudSelect T="string"
                        Label="Category"
                        Variant="Variant.Outlined"
                        @bind-Value="selectedCategory"
                        @bind-Value:after="@(() => ResetAndLoadProducts())"
                        Dense="true">
                            <MudSelectItem Value="@("All")"></MudSelectItem>
                            @foreach (var category in _categories)
                            {
                                <MudSelectItem Value="@category.Name">@category.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem lg="12" sm="3" xs="12">
                        <MudSelect T="string"
                        Label="Sort By"
                        Variant="Variant.Outlined"
                        @bind-Value="selectedSort"
                        @bind-Value:after="@(() => ResetAndLoadProducts())"
                        Dense="true">
                            <MudSelectItem Value="@("newest")">Newest First</MudSelectItem>
                            <MudSelectItem Value="@("oldest")">Oldest First</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>
            </div>
        </MudItem>

        <MudItem lg="10" sm="12">
            <div>
                <MudText Typo="Typo.h5" Class="section-title">Products</MudText>
                <MudGrid Class="mt-4 mud-grid-product" @onscroll="OnScrollHandler" style="height:70vh; overflow-y: scroll;">
                    @foreach (var product in _products)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudCard Class="list-card">
                                <MudCardContent class="pa-0">
                                    @if (product.ProductImages?.Any() == true)
                                    {
                                        <div style="height: 240px; overflow: hidden;">
                                            <img src="@($"data:image/jpeg;base64,{product.ProductImages.First()}")"
                                            alt="Product Image"
                                            style="width: 100%; height: 100%; object-fit: cover;" />
                                        </div>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Class="mt-2">No image available</MudText>
                                    }
                                    <div class="pa-4">
                                        <MudText Typo="Typo.h6" Class="mb-2 title">@product.Title</MudText>
                                        <div class="d-flex align-center justify-between mb-3">
                                            <MudText Typo="Typo.h5" Class="price flex-1">
                                                ₹@product.UnitPrice.ToString("N2")
                                            </MudText>
                                            <MudText Typo="Typo.body2">
                                                @string.Join(", ", product.DepartmentNames)
                                            </MudText>
                                        </div>
                                       @*  <div>
                                            <MudText Typo="Typo.body2" Class="sub-title">@product.Description</MudText>
                                        </div> *@
                                    </div>
                                </MudCardContent>
                                <MudCardActions Class="d-flex">
                                    @if (AuthStateService.UserRole == "admin")
                                    {
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => OpenEditProductDialogAsync(product.Id)">
                                            EDIT
                                        </MudButton>
                                    }
                                    <MudButton Variant="Variant.Filled" DropShadow="false" Class="btn-theme btn-yellow" OnClick="@(() => NavigateToProductDetails(product.Id))">
                                        View Details
                                    </MudButton>
                                    @if (AuthStateService.UserRole == "admin")
                                    {
                                        <div>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteProductDetails(product.Id))" />
                                        </div>
                                    }
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
                @if (_isLoadingMore)
                {
                    <MudProgressCircular Class="mt-4" Size="Size.Small" Color="Color.Primary" />
                }
            </div>
        </MudItem>
    </MudGrid>
</MudContainer>



<style>
    .product-listing {
        margin-bottom: 100px;
    }
    .custom-dialog {
    max-width: 800px;
    width: 90%;
    }
    .list-card {
    border-radius: 10px;
    overflow: hidden;
    box-shadow: none;
    border: 1px solid #e6e6e6;
    height: 450px;
    }
    .list-card .title {
    font-size: 20px;
    line-height: normal;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    position: relative;
    }

    .list-card .sub-title {
    font-size: 14px;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    position: relative;
    }
    .list-card .price {
    font-size: 26px;
    font-weight: 600;
    }
    .btn-theme.btn-yellow {
    width: 100%;
    background: #FFD700;
    color: #000;
    text-transform: capitalize;
    border: 1px solid #FFD700;
    }

    .btn-theme.btn-yellow:hover {
    background: #fff;
    border: 1px solid #FFD700;
    }
    .section-title {
    font-weight: 500;
    }
}
</style>


@code {
    [Parameter]
    public string productId { get; set; }
    private string selectedDepartment = "All";
    private string selectedCategory = "All";
    private string selectedSort = "newest";
    private string searchText = "";
    private List<GetAllProductDto> _products = new();
    private List<GetAllDepartmentDto> _departments = new();
    private List<GetAllCategoryDto> _categories = new();
    private string errorMessage;
    private bool _isLoaded = false;
    private bool _isLoadingMore = false;
    private int currentPage = 1;
    private const int PageSize = 20;

    private async Task OnScrollHandler()
    {
        var gridElement = await JSRuntime.InvokeAsync<IJSObjectReference>("eval", "document.querySelector('.mud-grid-product')");
        var scrollHeight = GetValueFromJsonElement(await JSRuntime.InvokeAsync<JsonElement>("navigatorInterop.getScrollHeight", gridElement));
        var scrollTop = GetValueFromJsonElement(await JSRuntime.InvokeAsync<JsonElement>("navigatorInterop.getScrollPosition", gridElement));
        var clientHeight = GetValueFromJsonElement(await JSRuntime.InvokeAsync<JsonElement>("navigatorInterop.getClientHeight", gridElement));

        // Check if the user is at the bottom of the grid
        if (scrollTop + clientHeight >= scrollHeight - 5 && !_isLoadingMore)
        {
            _isLoadingMore = true;
            await LoadMoreProducts();
            _isLoadingMore = false;
        }
    }

    private double GetValueFromJsonElement(JsonElement element)
    {
        return element.ValueKind == JsonValueKind.Number ? element.GetDouble() : 0;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadInitialData();
        }
    }

    private async Task LoadInitialData()
    {
        try
        {
            var departmentResponse = await DepartmentService.GetAllDepartmentAsync();
            if (departmentResponse.IsSuccess)
            {
                _departments = departmentResponse.Result;
            }

            var categoryResponse = await CategoryService.GetAllCategoryAsync();
            if (categoryResponse.IsSuccess)
            {
                _categories = categoryResponse.Result;
            }

            await ResetAndLoadProducts();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task ResetAndLoadProducts()
    {
        _products.Clear();
        currentPage = 1;
        await LoadInitialProducts();
    }

    private async Task LoadMoreProducts()
    {
        if (!_isLoadingMore) return;
        _isLoadingMore = true;
        var response = await ProductService.GetAllProductsAsync(selectedDepartment, selectedCategory, searchText, selectedSort, currentPage, PageSize);
        if (response.IsSuccess)
        {
            if(response.Result.Count > 0){
                _products.AddRange(response.Result);
                currentPage++;
                _isLoadingMore = false;
                StateHasChanged();
            }
        }
        else
        {
            errorMessage = response.Message;
        }

    }

      private async Task LoadInitialProducts()
    {
        var response = await ProductService.GetAllProductsAsync(selectedDepartment, selectedCategory, searchText, selectedSort, currentPage, PageSize);
        if (response.IsSuccess)
        {
            if(response.Result.Count > 0){
                _products.AddRange(response.Result);
                currentPage++;
            }
        }
        else
        {
            errorMessage = response.Message;
        }

        StateHasChanged();
    }
    private void NavigateToProductDetails(string id)
    {
        var encodedId = Convert.ToBase64String(Encoding.UTF8.GetBytes(id));
        NavigationManager.NavigateTo($"/product-details/{encodedId}");
    }
    private async Task DeleteProductDetails(string id)
    {
        var response = await ProductService.DeleteProductByIdAsync(id);
        if (response.IsSuccess)
        {
            Snackbar.Add("Product Deleted Successfully", Severity.Success);
            await RefreshProductList();
        }
        else
        {
            var errorMessage = response.Errors != null && response.Errors.Any()
               ? string.Join(", ", response.Errors)
               : "An unknown error occurred.";
                        Snackbar.Add($"Error: {errorMessage}", Severity.Error);
        }
    }

    private async Task OpenAddProductDialogAsync()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var parameters = new DialogParameters
    {
        { "OnProductSaved", EventCallback.Factory.Create(this, RefreshProductList) }
    };

        var dialog = DialogService.Show<ProductFormDialog>("Add Product", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshProductList();
        }
    }

    private async Task OpenEditProductDialogAsync(string productId)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var parameters = new DialogParameters
    {
        { "Id", productId },
        { "OnProductSaved", EventCallback.Factory.Create(this, RefreshProductList) }
    };

        var dialog = DialogService.Show<ProductFormDialog>("Edit Product", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshProductList();
        }
    }

    private async Task RefreshProductList()
    {
        await LoadInitialData();
    }

}