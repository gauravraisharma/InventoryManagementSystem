@page "/order-details/{EncodedId}"
<PageTitle>Order Detail </PageTitle>
@inject IOrderService OrderService
@inject NavigationManager Navigation
@using IMS.Shared.Interface.Order
@using IMS.Shared.RequestDto.orderDTOs
<MudPopoverProvider />


@if (order == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <div class="content-wrapper">
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudText Typo="Typo.h4" Class="section-title mb-5">Order Details</MudText>
    <MudCard Class="card-item">
        <MudCardContent>
                <MudText Typo="Typo.h6" GutterBottom="true"><strong>Order ID:</strong> @order.OrderId</MudText>
                <MudText Typo="Typo.body1"><strong>Order Date:</strong> @order.OrderDate.ToShortDateString()</MudText>
                <MudText Typo="Typo.body1"><strong>Total Price:</strong> ₹@order.TotalAmount.ToString("N2")</MudText>
            <MudText Typo="Typo.body1">
                    <strong>Address:</strong> @(order.Address != null
                ? $"{order.Address.City}, {order.Address.Street}, {order.Address.Country}, {order.Address.PinCode}" 
        : "Address not available")
</MudText>
        </MudCardContent>

        <MudCardContent>
            <MudText Typo="Typo.h6">Products:</MudText>
            <MudTable Items="@order.ProductDetails.ToList()" Hover="true" Bordered="true">
                <HeaderContent>
                    <MudTh>Product Name</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh>Product Size</MudTh>
                    <MudTh>Price</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Title</MudTd>
                    <MudTd>@context.Quantity</MudTd>
                    <MudTd>@context.ItemSize</MudTd>
                    <MudTd>₹@context.Amount.ToString("N2")</MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
        </MudCard>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" @onclick="NavigateBack">Back to Orders</MudButton>

    </MudContainer>
    </div>
}


<style>
    .card-item {
        box-shadow: rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;
        border-radius: 10px;
        border: 1px solid #eaeaea;
        margin-bottom: 20px;
        overflow: hidden;
    }

    .section-title {
        font-weight: 500;
    }
    .content-wrapper {
        min-height: calc(100vh - 120px);
    }
</style>
@code {
    [Parameter]
    public string EncodedId { get; set; }

    private GetOrderDto order;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(EncodedId))
        {
            var decodedId = EncodedId;

            var response = await OrderService.GetOrderByIdAsync(decodedId);

            if (response.IsSuccess)
            {
                order = response.Result;
            }
            else
            {
                Console.Error.WriteLine(response.Message);
                order = null;
            }
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/myorder");
    }
}
