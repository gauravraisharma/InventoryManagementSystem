@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IProductService ProductService
@inject IDepartmentService DepartmentService
@inject ICategoryService CategoryService
@using IMS.Shared.Interface.Category
@using IMS.Shared.Interface.Department
@using IMS.Shared.Interface.Product
@using IMS.Shared.RequestDto.DepartmentDTOs
@using IMS.Shared.RequestDto.ProductDTOs
@using System.ComponentModel.DataAnnotations

<MudDialog>
    @*   <TitleContent>
        Add PRODUCTS
    </TitleContent> *@
    <DialogContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
            <MudCard Elevation="0">
                <MudCardHeader>
                </MudCardHeader>
                <MudCardContent>
                    <EditForm Model="product" OnValidSubmit="HandleSubmit" FormName="ProductForm">
                        <DataAnnotationsValidator />
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="product.Title"
                                              Label="Product Title"
                                              Variant="Variant.Filled"
                                              For="@(() => product.Title)"
                                              Placeholder="e.g Blue Jeans" />
                            </MudItem>

                            <MudItem xs="12" md="6">
                                <MudSelect T="string"
                                           Label="Department"
                                           Variant="Variant.Outlined"
                                           @bind-Value="selectedDepartment"
                                           Dense="true">
                                    <MudSelectItem Value="@("all")">Pick a Department</MudSelectItem>

                                    @foreach (var department in _departments)
                                    {
                                        <MudSelectItem Value="@department.DepartmentId">@department.Name</MudSelectItem>
                                    }
                                </MudSelect>
                                @if (showValidation && string.IsNullOrWhiteSpace(selectedDepartment))
                                {
                                    <MudText Color="Color.Error">Please select a department.</MudText>
                                }
                            </MudItem>

                            <MudItem xs="12" md="6">
                                <MudSelect T="string"
                                           Label="Category"
                                           Variant="Variant.Outlined"
                                           @bind-Value="selectedCategory"
                                           Dense="true">
                                    <MudSelectItem Value="@("all")">Pick a Category</MudSelectItem>

                                    @foreach (var category in _categories)
                                    {
                                        <MudSelectItem Value="@category.CategoryId">@category.Name</MudSelectItem>
                                    }
                                </MudSelect>
                                @if (showValidation && string.IsNullOrWhiteSpace(selectedCategory))
                                {
                                    <MudText Color="Color.Error">Please select a category.</MudText>
                                }
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="product.Description"
                                              Label="Product Description"
                                              Variant="Variant.Filled"
                                              Lines="3"
                                              For="@(() => product.Description)"
                                              Placeholder="e.g., Blue jeans, regular fit, 100% cotton" />
                            </MudItem>
                            <MudItem xs="12" Class="mt-4">
                                <MudText>Product Images</MudText>
                                @if (product?.ProductImages != null && product.ProductImages.Any())
                                {
                                    <div class="image-row">
                                        @foreach (var base64Image in product.ProductImages)
                                        {
                                            <div class="square-box">
                                                <img src="@($"data:image/jpeg;base64,{base64Image}")" alt="Product Image" />
                                            </div>
                                        }
                                    </div>
                                }
                                @if (Id != null && (product?.ProductImages == null || !product.ProductImages.Any()) && (_uploadedFiles == null || !_uploadedFiles.Any()))
                                {
                                    <MudText>No existing product images found.</MudText>
                                }
                            </MudItem>


                            <MudItem xs="12" Class="mt-4">
                                <MudText>Product Images</MudText>

                                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" AllowMultiple="true">
                                    <ActivatorContent>
                                        <MudButton Variant="Variant.Filled"
                                                   Color="Color.Primary"
                                                   StartIcon="@Icons.Material.Filled.CloudUpload">
                                            Upload Pictures
                                        </MudButton>
                                    </ActivatorContent>
                                </MudFileUpload>
                                @if (showValidation && (!product.ProductImages.Any() && (_uploadedFiles == null || !_uploadedFiles.Any())))
                                {
                                    <MudText Color="Color.Error">Please upload at least one image.</MudText>
                                }
                                @if (_uploadedFiles != null)
                                {
                                    <MudText Typo="@Typo.h6">@_uploadedFiles.Count() File@(_uploadedFiles.Count() == 1 ? "" : "s"):</MudText>
                                    <MudList T="string">
                                        @foreach (var file in _uploadedFiles)
                                        {
                                            <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                                                @file.FileName @* <code>@file.Data bytes</code> *@
                                            </MudListItem>
                                        }
                                    </MudList>
                                }

                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudNumericField @bind-Value="product.UnitPrice"
                                                 Label="Unit Price"
                                                 Variant="Variant.Filled"
                                                 For="@(() => product.UnitPrice)" />
                            </MudItem>

                            <MudItem xs="12" md="4">
                                <MudNumericField @bind-Value="product.UnitsInStock"
                                                 Label="Units in Stock"
                                                 Variant="Variant.Filled"
                                                 For="@(() => product.UnitsInStock)" />
                            </MudItem>

                            <MudItem xs="12" md="4">
                                <MudTextField @bind-Value="product.ProductCode"
                                              Label="Product #"
                                              Variant="Variant.Filled"
                                              For="@(() => product.ProductCode)" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudText Typo="Typo.subtitle1">Select available sizes:</MudText>
                                <div class="size-checkbox-group">
                                    @foreach (var size in AvailableSizes)
                                    {
                                        <label class="size-checkbox">
                                            <input type="checkbox"
                                                   checked="@product.ProductSizes?.Contains(size)"
                                                   @onchange="@((ChangeEventArgs e) => ToggleSize(size, e.Value))" />
                                            <span>@size</span>
                                        </label>
                                    }
                                </div>
                                @if (showValidation && !product.ProductSizes.Any())
                                {
                                    <MudText Color="Color.Error">Please select at least one size.</MudText>
                                }
                            </MudItem>

                            @* Debug section to show selected sizes (you can remove this in production) *@
                            <MudItem xs="12">
                                <MudText>Selected sizes: @string.Join(", ", product.ProductSizes)</MudText>
                            </MudItem>
                        </MudGrid>

                        <div class="d-flex justify-end mt-6">
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Default"
                                       Class="mx-2"
                                       OnClick="Cancel">
                                Cancel
                            </MudButton>
                            <MudButton ButtonType="ButtonType.Submit"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       OnClick="ValidateForm">
                                @(Id == null ? "Add Product" : "Save Changes")
                            </MudButton>
                        </div>
                    </EditForm>
                </MudCardContent>
            </MudCard>
        </MudContainer>

        <style>
            .mud-input.mud-input-filled {
                background-color: #f5f5f5;
            }

                .mud-input.mud-input-filled:hover {
                    background-color: #ebebeb;
                }

                .mud-input.mud-input-filled.mud-input-focused {
                    background-color: #e0e0e0;
                }

            .image-row {
                display: flex;
                flex-wrap: nowrap;
                gap: 10px;
                overflow-x: auto;
                white-space: nowrap;
            }

            .square-box {
                width: 200px;
                height: 200px;
                overflow: hidden;
                border: 1px solid #ccc;
                display: flex;
                justify-content: center;
                align-items: center;
                flex-shrink: 0;
            }

        </style>
    </DialogContent>
    @* <DialogActions>
        <MudButton OnClick="CancelDialog">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions> *@
</MudDialog>
@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public EventCallback OnProductSaved { get; set; }
    private string selectedDepartment = "";
    private string selectedCategory = "";
    private string selectedSort = "newest";
    private string searchText = "";
    private List<GetAllDepartmentDto> _departments = new();
    private List<Shared.RequestDto.CategoryDTOs.GetAllCategoryDto> _categories = new();
    private string errorMessage;
    private AddProductDto? product { get; set; }
    public List<IBrowserFile> ImageFiles { get; set; } = new List<IBrowserFile>();
    public List<string> ImageUrls { get; set; } = new List<string>();
    private List<string> AvailableSizes = new List<string> { "S", "M", "L", "XL", "XXL" };
    private Dictionary<string, bool> SelectedSizes = new Dictionary<string, bool>();
    private List<GetAllProductDto> _products = new();
    private List<UploadedFile> _uploadedFiles = new(); // Holds processed file data
    private bool showValidation = false;
    private async Task UploadFiles(IBrowserFile file)
    {
        if (file != null)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer); // Read file data into byte array
            _uploadedFiles.Add(new UploadedFile
                {
                    FileName = file.Name,
                    ContentType = file.ContentType,
                    Data = buffer
                });
        }

    }

    private void ToggleSize(string size, object isChecked)
    {
        Console.WriteLine("Toggle Function clicked.");

        if (bool.TryParse(isChecked?.ToString(), out bool checkedState))
        {
            if (checkedState && !product.ProductSizes.Contains(size))
            {
                product.ProductSizes.Add(size);
            }
            else if (!checkedState && product.ProductSizes.Contains(size))
            {
                product.ProductSizes.Remove(size);
            }
        }
        SelectedSizes[size] = checkedState;
    }
    protected override async Task OnInitializedAsync()
    {

        product ??= new AddProductDto();

        foreach (var size in AvailableSizes)
        {
            SelectedSizes[size] = false;
        }

        if (!string.IsNullOrEmpty(Id))
        {

            var response = await ProductService.GetProductByIdAsync(Id);

            if (response.IsSuccess)
            {

                var fetchedProduct = response;
                if (fetchedProduct != null)
                {
                    product = new AddProductDto
                        {
                            Title = fetchedProduct.Result.Title,
                            Description = fetchedProduct.Result.Description,
                            UnitPrice = fetchedProduct.Result.UnitPrice,
                            UnitsInStock = fetchedProduct.Result.UnitsInStock,
                            ProductCode = fetchedProduct.Result.ProductCode,
                            CategoryIds = fetchedProduct.Result.CategoryIds,
                            DepartmentIds = fetchedProduct.Result.DepartmentIds,
                            ProductSizes = fetchedProduct.Result.ProductSizes,
                            ProductImages = fetchedProduct.Result.ProductImages
                        };
                    selectedDepartment = string.Join(",", fetchedProduct.Result.DepartmentIds);
                    selectedCategory = string.Join(",", fetchedProduct.Result.CategoryIds);
                }
            }
            else
            {
                errorMessage = response.Message ?? "Failed to fetch product details.";
            }
        }

        var departmentResponse = await DepartmentService.GetAllDepartmentAsync();
        if (departmentResponse.IsSuccess)
        {
            _departments = departmentResponse.Result;
        }
        else
        {
            errorMessage = departmentResponse.Message;
        }
        var categoryResponse = await CategoryService.GetAllCategoryAsync();
        if (categoryResponse.IsSuccess)
        {
            _categories = categoryResponse.Result;
        }
        else
        {
            errorMessage = categoryResponse.Message;
        }
    }

    private void ValidateForm()
    {
        showValidation = true; // Show error messages when Save is clicked
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(selectedDepartment))
        {
            Snackbar.Add("Please select a department.", Severity.Error);
            return;
        }

        if (string.IsNullOrWhiteSpace(selectedCategory))
        {
            Snackbar.Add("Please select a category.", Severity.Error);
            return;
        }

        if (!product.ProductSizes.Any())
        {
            Snackbar.Add("Please select at least one size.", Severity.Error);
            return;
        }

        if ((_uploadedFiles == null || !_uploadedFiles.Any()) && !product.ProductImages.Any())
        {
            Snackbar.Add("Please upload at least one image.", Severity.Error);
            return;
        }
        try
        {

            using var content = new MultipartFormDataContent();

            // Add other product fields
            content.Add(new StringContent(product.Title), "Title");
            content.Add(new StringContent(product.Description), "Description");
            content.Add(new StringContent(product.UnitPrice.ToString()), "UnitPrice");
            content.Add(new StringContent(product.UnitsInStock.ToString()), "UnitsInStock");
            content.Add(new StringContent(product.ProductCode), "ProductCode");
            content.Add(new StringContent(string.Join(",", selectedCategory)), "CategoryIds");
            content.Add(new StringContent(string.Join(",", selectedDepartment)), "DepartmentIds");
            content.Add(new StringContent(string.Join(",", product.ProductSizes ?? new List<string>())), "ProductSizes");



            if (!string.IsNullOrEmpty(Id))
            {
                content.Add(new StringContent(Id), "Id");
            }

            foreach (var uploadedFile in _uploadedFiles)
            {
                var fileContent = new ByteArrayContent(uploadedFile.Data);
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(uploadedFile.ContentType);
                content.Add(fileContent, "ImageFiles", uploadedFile.FileName);
            }
            var response = Id == null
            ? await ProductService.AddProductAsync(content)
            : await ProductService.UpdateProductAsync(content);

            if (response.IsSuccess)
            {

                Snackbar.Add("Product Saved successfully!", Severity.Success);
                await OnProductSaved.InvokeAsync();
                CancelDialog();
                NavigationManager.NavigateTo("/product");


            }
            else
            {
                // Snackbar.Add($"Error: {response.Errors}", Severity.Error);
                var errorMessage = response.Errors != null && response.Errors.Any()
            ? string.Join(", ", response.Errors)
            : "An unknown error occurred.";
                Snackbar.Add($"Error: {errorMessage}", Severity.Error);
            }
            NavigationManager.NavigateTo("/product");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error saving product!", Severity.Error);
        }
    }

    public async Task GetAllProducts()
    {
        var response = await ProductService.GetAllProductsAsync(selectedDepartment, selectedCategory, searchText, selectedSort);
        if (response.IsSuccess)
        {
            _products = response.Result;
            StateHasChanged();
        }
        else
        {
            errorMessage = response.Message;
        }
    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/product");
    }



    private void OnSizeChanged(bool isChecked, string size)
    {
        if (isChecked)
        {
            if (!product.ProductSizes.Contains(size))
            {
                product.ProductSizes.Add(size);
            }
        }
        else
        {
            product.ProductSizes.Remove(size);
        }
    }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void CancelDialog() => MudDialog.Cancel();
}