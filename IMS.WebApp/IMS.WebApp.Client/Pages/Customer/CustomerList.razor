@page "/customer"
@using IMS.Shared.Interface.Auth
@using IMS.Shared.RequestDto.UserDTOs
@inject IAuthService AuthService
@inject ISnackbar Snackbar

<MudPaper Elevation="4" Class="centered-table-container">
    <MudTable Items="customers" Hover="true" SortLabel="Sort by" Striped="true" Dense="true" Bordered="true">
        <HeaderContent>
            <MudTh Class="hidden-column">Id</MudTh>
            <MudTh>First Name</MudTh>
            <MudTh>Last Name</MudTh>
            <MudTh>User Name</MudTh>
            <MudTh>Email</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id" Class="hidden-column">@context.Id</MudTd>
            <MudTd DataLabel="First Name">@context.FirstName</MudTd>
            <MudTd DataLabel="Last Name">@context.LastName</MudTd>
            <MudTd DataLabel="Last Name">@context.UserName</MudTd>
            <MudTd DataLabel="Last Name">@context.Email</MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

<style>
    .hidden-column {
        display: none;
    }
</style>

@code {
    private List<ApplicationUserDto> customers = new List<ApplicationUserDto>();

    protected override async Task OnInitializedAsync()
    {
        var response = await AuthService.GetAllUsers();
        if (response.IsSuccess)
        {
            customers = response.Result;
            Snackbar.Add("Cutomer List Fetched successfully!", Severity.Success);
        }
        else
        {
            var errorMessage = response.Errors != null && response.Errors.Any()
        ? string.Join(", ", response.Errors)
        : "An unknown error occurred.";
            Snackbar.Add($"Error: {errorMessage}", Severity.Error);
        }
        }
    }
